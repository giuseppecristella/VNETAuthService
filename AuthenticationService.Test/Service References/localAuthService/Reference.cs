//------------------------------------------------------------------------------
// <auto-generated>
//     Il codice è stato generato da uno strumento.
//     Versione runtime:4.0.30319.42000
//
//     Le modifiche apportate a questo file possono provocare un comportamento non corretto e andranno perse se
//     il codice viene rigenerato.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AuthenticationService.Test.localAuthService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/AuthenticationService")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="localAuthService.IAuthenticationService")]
    public interface IAuthenticationService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/CreateUser", ReplyAction="http://tempuri.org/IAuthenticationService/CreateUserResponse")]
        string CreateUser(string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/CreateUser", ReplyAction="http://tempuri.org/IAuthenticationService/CreateUserResponse")]
        System.Threading.Tasks.Task<string> CreateUserAsync(string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/CustomValidateUser", ReplyAction="http://tempuri.org/IAuthenticationService/CustomValidateUserResponse")]
        string CustomValidateUser(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/CustomValidateUser", ReplyAction="http://tempuri.org/IAuthenticationService/CustomValidateUserResponse")]
        System.Threading.Tasks.Task<string> CustomValidateUserAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/GetClientCode", ReplyAction="http://tempuri.org/IAuthenticationService/GetClientCodeResponse")]
        int GetClientCode(string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/GetClientCode", ReplyAction="http://tempuri.org/IAuthenticationService/GetClientCodeResponse")]
        System.Threading.Tasks.Task<int> GetClientCodeAsync(string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/CreateUserClient", ReplyAction="http://tempuri.org/IAuthenticationService/CreateUserClientResponse")]
        bool CreateUserClient(int clientId, string codiceStruttura, string nome, string cognome, string indirizzo, string citta, string provincia, string cap, string nazione, string telefono, string cellulare, string email, string password, System.DateTime registratoIl, bool attivo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/CreateUserClient", ReplyAction="http://tempuri.org/IAuthenticationService/CreateUserClientResponse")]
        System.Threading.Tasks.Task<bool> CreateUserClientAsync(int clientId, string codiceStruttura, string nome, string cognome, string indirizzo, string citta, string provincia, string cap, string nazione, string telefono, string cellulare, string email, string password, System.DateTime registratoIl, bool attivo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IAuthenticationService/GetDataUsingDataContractResponse")]
        AuthenticationService.Test.localAuthService.CompositeType GetDataUsingDataContract(AuthenticationService.Test.localAuthService.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IAuthenticationService/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<AuthenticationService.Test.localAuthService.CompositeType> GetDataUsingDataContractAsync(AuthenticationService.Test.localAuthService.CompositeType composite);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAuthenticationServiceChannel : AuthenticationService.Test.localAuthService.IAuthenticationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AuthenticationServiceClient : System.ServiceModel.ClientBase<AuthenticationService.Test.localAuthService.IAuthenticationService>, AuthenticationService.Test.localAuthService.IAuthenticationService {
        
        public AuthenticationServiceClient() {
        }
        
        public AuthenticationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AuthenticationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthenticationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthenticationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string CreateUser(string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved) {
            return base.Channel.CreateUser(username, password, email, passwordQuestion, passwordAnswer, isApproved);
        }
        
        public System.Threading.Tasks.Task<string> CreateUserAsync(string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved) {
            return base.Channel.CreateUserAsync(username, password, email, passwordQuestion, passwordAnswer, isApproved);
        }
        
        public string CustomValidateUser(string username, string password) {
            return base.Channel.CustomValidateUser(username, password);
        }
        
        public System.Threading.Tasks.Task<string> CustomValidateUserAsync(string username, string password) {
            return base.Channel.CustomValidateUserAsync(username, password);
        }
        
        public int GetClientCode(string code) {
            return base.Channel.GetClientCode(code);
        }
        
        public System.Threading.Tasks.Task<int> GetClientCodeAsync(string code) {
            return base.Channel.GetClientCodeAsync(code);
        }
        
        public bool CreateUserClient(int clientId, string codiceStruttura, string nome, string cognome, string indirizzo, string citta, string provincia, string cap, string nazione, string telefono, string cellulare, string email, string password, System.DateTime registratoIl, bool attivo) {
            return base.Channel.CreateUserClient(clientId, codiceStruttura, nome, cognome, indirizzo, citta, provincia, cap, nazione, telefono, cellulare, email, password, registratoIl, attivo);
        }
        
        public System.Threading.Tasks.Task<bool> CreateUserClientAsync(int clientId, string codiceStruttura, string nome, string cognome, string indirizzo, string citta, string provincia, string cap, string nazione, string telefono, string cellulare, string email, string password, System.DateTime registratoIl, bool attivo) {
            return base.Channel.CreateUserClientAsync(clientId, codiceStruttura, nome, cognome, indirizzo, citta, provincia, cap, nazione, telefono, cellulare, email, password, registratoIl, attivo);
        }
        
        public AuthenticationService.Test.localAuthService.CompositeType GetDataUsingDataContract(AuthenticationService.Test.localAuthService.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<AuthenticationService.Test.localAuthService.CompositeType> GetDataUsingDataContractAsync(AuthenticationService.Test.localAuthService.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
    }
}
